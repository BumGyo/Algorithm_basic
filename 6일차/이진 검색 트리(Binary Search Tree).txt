* 이진 검색 트리(Binary Search Tree)
-> 먼저 root(루트 노드)에 데이터를 저장합니다.
-> 새로운 데이터가 트리 자료 구조에 입력되면
   루트 노드에 저장되어 있는 데이터와 같은지를 비교
   -> 같은(동일한) 데이터는 트리 자료 구조에 저장될 수
      없도록 해야 합니다!!

예)  루트 노드에 10이 저장되어 있는 상태
     -> if 현재 루트 노드가 갖고 있는 노드의 주소가 없으면 :
           노드 객체가 갖고 있는 data 멤버 변수에 정수 10을
           저장

-> if root_ptr is None:
      node.data = 10
   else:
      print("두 번째 노드 부터 처리할 명령어들을 작성")
      # 현재 루트 노드가 갖고 있는 데이터와 비교
      if root_ptr.data != 새로운데이터:
         print("다른 데이터 이므로 트리 노드에 저장 가능")
         # 왼쪽 자식 노드에는 루트 노드가 갖고 있는
         # 데이터 보다 같거나 작은 데이터
         if root_ptr.data >= 새로운데이터:
            # 왼쪽 자식 노드에 새로운 데이터를 저장
         else:
            # 루트 노드의 값 보다 큰 경우에는
            # 오른쪽 자식 노드에 새로운 데이터를 저장
      else:
         print("같은 데이터는 트리 노드에 저장할 수 없음")
   
















